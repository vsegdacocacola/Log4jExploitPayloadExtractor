import requests, re, magic, os, uuid, sqlite3, socket
from ipaddress import ip_address, ip_network
from hashlib import sha256
from subprocess import Popen, PIPE
from urllib.parse import urlparse

class IocDB:
    con = None
    def __init__(self):
        self.con = sqlite3.connect('ioc.sqlite')
        self.con.row_factory = sqlite3.Row
        create_sql = """CREATE TABLE IF NOT EXISTS ioc (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            case_id TEXT,
            created TEXT,
            uri TEXT,
            uri_scheme TEXT,
            uri_host TEXT,
            uri_path TEXT,
            uri_query TEXT,
            ip TEXT,
            file_name TEXT,
            file_type TEXT,
            file_content_type TEXT,
            file_sha256 TEXT,
            file_size TEXT,
            file_content TEXT,
            status TEXT
            );"""
        cur = self.con.cursor()
        cur.execute(create_sql)
        pass

    def __del__(self):
        if(self.con):
            self.con.close()

    def lookupUri(self, uri):
        select_sql = """SELECT case_id FROM ioc WHERE uri=:uri"""
        cur = self.con.cursor()
        cur.execute( select_sql, {"uri": uri} )
        r = cur.fetchall()
        if(len(r) == 0):
            return None
        else:
            return r[0][0]

    def getCase(self, case_id):
        select_sql = """SELECT * FROM ioc WHERE case_id=:case_id"""
        cur = self.con.cursor()
        cur.execute( select_sql, {"case_id" : case_id } )
        rows = cur.fetchall()
        res = []
        for row in rows:
            res.append({k: row[k] for k in row.keys()})
        return res

    def add(self, case):
        insert_sql = """INSERT INTO ioc(case_id, created, uri, uri_scheme, uri_host, uri_path, uri_query, ip, file_name, file_type, file_sha256, file_content, file_content_type, file_size, status) VALUES (?, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
        cur = self.con.cursor()
        url = urlparse(case["uri"])
        cur.execute( insert_sql, ( case["case_id"], case["uri"], url.scheme, url.netloc, url.path, url.query, case["ip"], case["file_name"], case["file_type"], case["file_sha256"], case["file_content"], case["file_content_type"], case["file_size"], case["status"] ) )
        return self.con.commit()
 
class PayloadExtractor:
    
    payload_dir = ""
    case_id = ""

    def __init__(self, dir = "./payloads/", case_id = "") -> None:
        if (not case_id):
            self.case_id = str(uuid.uuid4())
        else:
            self.case_id = case_id
        self.payload_dir = "{}{}/".format(dir, self.case_id)
        if not os.path.isdir(self.payload_dir):
            os.mkdir(self.payload_dir)
        return None
   
    def validateUri(self, uri):
        url = urlparse(uri)
        if ( not url.scheme in ["ldap", "http", "https"] ):
            return False
        if ( re.match(r"[^A-Za-z0-9\.\-]+", url.netloc) ):
            return False
        if ( re.match(r"[0-9\.\:]+", url.netloc) ):
            ip = re.sub(r"([0-9\.]+)[\:0-9]*",r"\1", url.netloc)
            try:
                ip = ip_address(ip)
                if(ip in ip_network("192.169.0.0/16") or ip in ip_network("172.16.0.0/12") or ip in ip_network("10.0.0.0/8")):
                    return False
            except Exception as e:
                return False
        if( re.match(r"[^A-Za-z0-9\.\/\%\-\+\#]+", url.path )):
            return False
        if( re.match(r"[^A-Za-z0-9\.\/\%\-\+\#\&\?]+", url.query )):
            return False
        return True
    
    def resolveUriHost(self, uri):
        url = urlparse(uri)
        print(url)
        host = re.search(r"^([^\:]+)", url.netloc).group(1)
        if(re.match(r"[0-9\.]+", host)):
            return host
        else:
            try:
                return socket.gethostbyname(host)    
            except Exception:
                return None


    def getPayload(self, uri, filename = str(uuid.uuid4())):
        payload = {
            "case_id": self.case_id,
            "uri": uri,
            "ip" : "",
            "file_name": filename,
            "file_type" : "",
            "file_content_type" : "",
            "file_sha256": "",
            "file_content": "",
            "file_size": "",
            "status": ""
        }
        ip = self.resolveUriHost(uri)
        if (not ip):
            payload["file_content"] = "DNS resolution failed"
            payload["status"] = "NOK"
            return payload
        else:
            payload["ip"] = ip
        content = ""
        if not self.validateUri(uri):
            payload["file_content"] = "Invalid URI"
            payload["status"] = "NOK"
            return payload
        if (re.match("^ldap", uri)):
            p = Popen( ["curl", "-k", "-m", "1", "-sS", uri], stdout=PIPE, stderr=PIPE)
            stdout, stderr = p.communicate()
            # print(stdout,"|", stderr)
            payload["status"] = stderr.decode("utf-8")    
            if (stderr):
                payload["status"] = "NOK"
                payload["file_content"] = stderr
                return payload
            else:
                payload["status"] = "OK"  
            content = stdout
        elif (re.match("^(http|https)", uri)):
            r = requests.get(uri)
            if(r.status_code == 200):
                payload["status"] = "OK"
            else:
                payload["status"] = "NOK"
            content = r.content
        payload_file = self.writePayload(payload["file_name"], content)
        payload["file_type"] = payload_file["file_type"]
        payload["file_sha256"] = payload_file["file_sha256"]
        payload["file_content_type"] = payload_file["file_content_type"]
        payload["file_size"] = len(content)
        if(re.match("text", payload_file["file_content_type"])):
            payload["file_content"] = content.decode("utf-8")
        #else:
        #    payload["file_content"] = re.sub(r"[\x00-\x1f\x7f-\xff]+", "", content.decode("utf-8", errors="ignore") )
        return payload

    def writePayload(self, filename, content):
        if(isinstance(content, str)):
            content = str.encode(content)
        with open("{}{}".format(self.payload_dir,filename), "wb") as f:
            f.write(content)
        return {
            "case_id" : self.case_id,
            "file_name" : filename,
            "file_sha256" : sha256(content).hexdigest(),
            "file_type" : magic.from_buffer(content),
            "file_size" : len(content),
            "file_content_type": magic.from_buffer(content, mime=True)
        }
    
    def getCaseId(self):
        return self.case_id

class ExtractLog4j(PayloadExtractor):

    def disassembleJavaByteCode(self, filename):
        p = Popen(["java", "-jar", "jd-cli.jar", "{}{}".format(self.payload_dir, filename) ], stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()
        return { "out": stdout.decode("utf-8"), "err": stderr.decode("utf-8") }

    def getJavaPayloads(self, uri):
        res = []
        java_base_class = self.getPayload(uri=uri, filename="JavaBaseClass")
        res.append(java_base_class)
        if(re.match("text", java_base_class["file_content_type"]) and java_base_class["status"] == "OK"):
            java_base_url = re.findall(r"((javaCodeBase|javaFactory):\s([^\n]+))", java_base_class["file_content"])
            if(len(java_base_url) == 2):
                uri = "{}{}.class".format(java_base_url[0][2], java_base_url[1][2])
                java_byte_code = self.getPayload(uri=uri, filename="{}.class".format(java_base_url[1][2]))
                if(re.match(".*compiled\sJava.*", java_byte_code["file_type"]) and java_byte_code["status"] == "OK"):
                    print("DISASSEMBLY STARTED")
                    disassembled_java = self.disassembleJavaByteCode(filename=java_byte_code["file_name"])
                    if(disassembled_java["out"]):
                        payload = self.writePayload(filename="{}.txt".format(java_byte_code["file_name"]), content=disassembled_java["out"])
                        payload["file_content"] = disassembled_java["out"]
                        payload["file_size"] = len( disassembled_java["out"] )
                        payload["uri"] = uri
                        payload["ip"] = self.resolveUriHost(uri)
                        payload["status"] = "OK"
                        res.append(payload)
                    else:
                        java_byte_code["content"] = disassembled_java["err"]
                        res.append(java_byte_code)
                else:
                    res.append(java_byte_code)
        return res
        
def deobfuscateJndiString(uri):
    url = uri
    is_deobfuscated = False
    while(not is_deobfuscated):
        if re.match("\$\{jnd[iı]{1}\:[a-z]+\:[^\{\}\$]+\}", url) or not re.search("\$\{[^\{\}\$]+\}", url):
            is_deobfuscated = True
            print(url)
            return re.sub(r"\$\{jnd[iı]{1}:(.*)\}", r"\1", url)
        else:
            is_deobfuscated = False
            parts = re.findall(r"(\$\{[^\$\{\}]+\})", url)
            for part in parts:
                d_part = re.sub(r"\$\{[A-Za-z0-9\:\_\-]+[\-]{1}[\']*([^\-\']+)[\']*\}", r"\1", part)
                d_part = re.sub(r"\$\{[A-Za-z0-9\:\_\-]+[\:]{1}[\']*([^\:\']+)[\']*\}", r"\1", d_part)
                d_part = re.sub(r"\$\{([^\}]+)\}", r"\1", d_part)
                url=url.replace(part, d_part)
              