from flask import Flask
from flask import request
from flask.json import jsonify
from flask.templating import render_template
from extract import deobfuscateJndiString
import extract, re

app = Flask(__name__)
app.config["DEBUG"] = False

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/api/deobfuscate', methods=['POST'])
def deobfuscate():
    if request.is_json:
        if "jndi" in request.get_json():
            return { "res" : deobfuscateJndiString(request.get_json()["jndi"]) }
        else:
            return { "err" : "No JNDI string provided" }
    else:
        return { "err" : "Invalid request" }

@app.route('/api/payload', methods=['POST'])
def getPayload():
    if request.is_json:
        request_json = request.get_json()
        print(request_json)
        if "url" in request_json:
            uri = deobfuscateJndiString(request_json["url"])
            d = extract.IocDB()
            case_id = None
            case_id = d.lookupUri(uri)
            print(case_id)
            if ( not case_id ):
                p = extract.ExtractLog4j()
                iocs = p.getJavaPayloads(uri)
                case_id = p.getCaseId()
                for ioc in iocs:
                    if( not d.lookupUri(ioc["uri"]) ):
                        d.add(ioc)
                all_urls_processed = False
                while not all_urls_processed:
                    all_urls_processed = True
                    payloads = d.getCase(case_id)
                    print("payloads")
                    print(payloads)
                    for payload in payloads:
                        payload = payload["file_content"]
                        urls = set(re.findall(r"(http[\s]*://[^\s\'\"]+)", payload))
                        for url in urls:
                            if not d.lookupUri(url):
                                p = extract.PayloadExtractor(case_id=case_id)
                                ioc = p.getPayload(url)
                                d.add(ioc)
                                all_urls_processed = False
            payloads = d.getCase(case_id=case_id)
            print(payloads)
            return { "res" : payloads }
        else:
            return { "err" : "No URI provided" }
    else:
        return { "err" : "Invalid request" } 
